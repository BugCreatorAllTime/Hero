// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using strange.extensions.mediation.impl;
using System.Reflection;
using UnityEngine;
/**
 * Every views display on screen must have BaseView component to capable auto 
 * alignment deal with multiple resolution.
 */ 

[RequireComponent(typeof(UIWidget))]
public class BaseView : View
{
	private UI2DSprite background;
	protected UIWidget widget;


	public UIRoot uiRoot {get; set;}

	public BaseView ()
	{
	}
	
	protected override void Start ()
	{
		try{
			uiRoot = GameObject.Find("UI Root").GetComponent<UIRoot>();
		}catch(Exception e)
		{
			Logger.Error("not have ui root",e);
		}
		base.Start();
		AutoAlign();
		AutoGetUIComponent();
		OnStart();
	}

	protected virtual void OnStart(){}

	protected void SetAnchors(int left, int right, int top, int bottom)
	{
		if(widget == null)
		{
			AutoAlign();
		}
		widget.bottomAnchor.absolute = bottom;
		widget.topAnchor.absolute = top;
		widget.leftAnchor.absolute = left;
		widget.rightAnchor.absolute = right;
		widget.UpdateAnchors();
	}

	private GameObject findGameObject(GameObject parent, string name) 
	{
#if UNITY_EDITOR
		return GameObject.Find(name);
#else
		GameObject ret = null;
		if(parent.name == name)
		{
			ret = parent;
		}else 
		{
			int len = parent.transform.childCount;
			for(int i = 0; i < len; ++i) 
			{
				GameObject child = parent.transform.GetChild(i).gameObject;
				if(child.name == name) 
				{
					return child;
				}else 
				{
					if(child.transform.childCount > 0) 
					{
						ret = findGameObject(child, name);
						if(ret != null)
						{
							break;
						}
					}
				}
			}
		}

		return ret;
#endif
	}

	public void Show()
	{
		NGUITools.SetActive(this.gameObject, true);
	}

	public void Hide()
	{
		NGUITools.SetActive(this.gameObject, false);
	}

	protected void SetBackground(Texture2D text2d) 
	{
		if(background == null) 
		{
			background = NGUITools.AddChild<UI2DSprite>(this.gameObject);
			background.depth = -1;
			background.width = Screen.width;
			background.height = Screen.height;
			background.gameObject.name = "Background";
		}
		background.sprite2D = Utils.CreateSprite(text2d);
	}

	private void AutoAlign()
	{
		widget = gameObject.GetComponent<UIWidget>();
		widget.SetAnchor(uiRoot.transform);
	}

	private void AutoGetUIComponent()
	{
		Type type = this.GetType();
		MemberInfo[] members = type.FindMembers(MemberTypes.Property,
		                                        BindingFlags.DeclaredOnly | 
		                                        BindingFlags.SetProperty | 
		                                        BindingFlags.Public | 
		                                        BindingFlags.Instance,
		                                        null, null);
		
		for(int i = 0; i< members.Length; ++i) 
		{
			MemberInfo member = members[i];
			object[] objs = member.GetCustomAttributes(typeof(NGUITag),true);
			Type memType ;
			if(objs.Length > 0) 
			{
				GameObject target = findGameObject(this.gameObject, member.Name);
				PropertyInfo pInfo = member as PropertyInfo;
				memType = pInfo.PropertyType;
				if(target != null) 
				{
					Component comp = target.GetComponent(memType);
					object[] agrs = new object[1];
					agrs[0] = comp;
					pInfo.SetValue(this, comp, null);
				}
			}
		}
	}

}


