// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using UnityEngine;

public class Logger
{
	private static String SEPARATOR = " ";
	private static Level level = Level.Trace;
	public static bool on = true;
	
	public static bool EnabledError()
	{
		return (level >= Level.Error);
	}
	
	public static bool EnabledInfo()
	{
		return (level >= Level.Info);
	}
	
	public static bool EnabledTrace()
	{
		return (level >= Level.Trace);
	}
	
	public static bool EnabledWarning()
	{
		return (level >= Level.Warning);
	}
	
	public static void Error(Exception e)
	{
		if (on && (level >= Level.Error))
		{
			UnityEngine.Debug.LogError(e);
		}
	}
	
	public static void Error(params object[] objs)
	{
		if (on && (level >= Level.Error))
		{
			UnityEngine.Debug.LogError(MakeString(objs));
		}
	}
	
	public static void Info(params object[] objs)
	{
		if (on && (level >= Level.Info))
		{
			UnityEngine.Debug.Log(MakeString(objs));
		}
	}
	
	public static void Trace(params object[] objs)
	{
		if (on && (level >= Level.Trace))
		{
			UnityEngine.Debug.Log(MakeString(objs));
		}
	}
	
	public static void Warning(params object[] objs)
	{
		if (on && (level >= Level.Warning))
		{
			UnityEngine.Debug.LogWarning(MakeString(objs));
		}
	}
	
	private enum Level
	{
		Error,
		Warning,
		Info,
		Trace
	}


	private static string MakeString(object[] objs) 
	{
		String output = "";
		if(objs == null) 
		{
			output += "NULL";
		}else
		{
			for (int i = 0; i< objs.Length; ++i) {
				object o = objs [i];
				if (o == null) {
					output += "NULL";
				} else {
					output += o.ToString ();
				}
				output += SEPARATOR;
			}
		}

		return output;
	}
}






